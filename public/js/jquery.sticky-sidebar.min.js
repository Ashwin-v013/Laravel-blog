/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/jquery.sticky-sidebar.min.js":
/*!***************************************************!*\
  !*** ./resources/js/jquery.sticky-sidebar.min.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * sticky-sidebar - A JavaScript plugin for making smart and high performance.\n * @version v3.3.1\n * @link https://github.com/abouolia/sticky-sidebar\n * @author Ahmed Bouhuolia\n * @license The MIT License (MIT)\n**/\n!function (t, e) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function () {\n  \"use strict\";\n\n  \"undefined\" != typeof window ? window : \"undefined\" != typeof __webpack_require__.g ? __webpack_require__.g : \"undefined\" != typeof self && self;\n\n  function t(t) {\n    return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, \"default\") ? t[\"default\"] : t;\n  }\n\n  function e(t, e) {\n    return t(e = {\n      exports: {}\n    }, e.exports), e.exports;\n  }\n\n  var i = e(function (t, e) {\n    (function (t) {\n      Object.defineProperty(t, \"__esModule\", {\n        value: !0\n      });\n\n      var l,\n          n,\n          e = function () {\n        function n(t, e) {\n          for (var i = 0; i < e.length; i++) {\n            var n = e[i];\n            n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);\n          }\n        }\n\n        return function (t, e, i) {\n          return e && n(t.prototype, e), i && n(t, i), t;\n        };\n      }(),\n          i = (l = \".stickySidebar\", n = {\n        topSpacing: 0,\n        bottomSpacing: 0,\n        containerSelector: !1,\n        innerWrapperSelector: \".inner-wrapper-sticky\",\n        stickyClass: \"is-affixed\",\n        resizeSensor: !0,\n        minWidth: !1\n      }, function () {\n        function c(t) {\n          var e = this,\n              i = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};\n          if (function (t, e) {\n            if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n          }(this, c), this.options = c.extend(n, i), this.sidebar = \"string\" == typeof t ? document.querySelector(t) : t, void 0 === this.sidebar) throw new Error(\"There is no specific sidebar element.\");\n          this.sidebarInner = !1, this.container = this.sidebar.parentElement, this.affixedType = \"STATIC\", this.direction = \"down\", this.support = {\n            transform: !1,\n            transform3d: !1\n          }, this._initialized = !1, this._reStyle = !1, this._breakpoint = !1, this.dimensions = {\n            translateY: 0,\n            maxTranslateY: 0,\n            topSpacing: 0,\n            lastTopSpacing: 0,\n            bottomSpacing: 0,\n            lastBottomSpacing: 0,\n            sidebarHeight: 0,\n            sidebarWidth: 0,\n            containerTop: 0,\n            containerHeight: 0,\n            viewportHeight: 0,\n            viewportTop: 0,\n            lastViewportTop: 0\n          }, [\"handleEvent\"].forEach(function (t) {\n            e[t] = e[t].bind(e);\n          }), this.initialize();\n        }\n\n        return e(c, [{\n          key: \"initialize\",\n          value: function value() {\n            var i = this;\n\n            if (this._setSupportFeatures(), this.options.innerWrapperSelector && (this.sidebarInner = this.sidebar.querySelector(this.options.innerWrapperSelector), null === this.sidebarInner && (this.sidebarInner = !1)), !this.sidebarInner) {\n              var t = document.createElement(\"div\");\n\n              for (t.setAttribute(\"class\", \"inner-wrapper-sticky\"), this.sidebar.appendChild(t); this.sidebar.firstChild != t;) {\n                t.appendChild(this.sidebar.firstChild);\n              }\n\n              this.sidebarInner = this.sidebar.querySelector(\".inner-wrapper-sticky\");\n            }\n\n            if (this.options.containerSelector) {\n              var e = document.querySelectorAll(this.options.containerSelector);\n              if ((e = Array.prototype.slice.call(e)).forEach(function (t, e) {\n                t.contains(i.sidebar) && (i.container = t);\n              }), !e.length) throw new Error(\"The container does not contains on the sidebar.\");\n            }\n\n            \"function\" != typeof this.options.topSpacing && (this.options.topSpacing = parseInt(this.options.topSpacing) || 0), \"function\" != typeof this.options.bottomSpacing && (this.options.bottomSpacing = parseInt(this.options.bottomSpacing) || 0), this._widthBreakpoint(), this.calcDimensions(), this.stickyPosition(), this.bindEvents(), this._initialized = !0;\n          }\n        }, {\n          key: \"bindEvents\",\n          value: function value() {\n            window.addEventListener(\"resize\", this, {\n              passive: !0,\n              capture: !1\n            }), window.addEventListener(\"scroll\", this, {\n              passive: !0,\n              capture: !1\n            }), this.sidebar.addEventListener(\"update\" + l, this), this.options.resizeSensor && \"undefined\" != typeof ResizeSensor && (new ResizeSensor(this.sidebarInner, this.handleEvent), new ResizeSensor(this.container, this.handleEvent));\n          }\n        }, {\n          key: \"handleEvent\",\n          value: function value(t) {\n            this.updateSticky(t);\n          }\n        }, {\n          key: \"calcDimensions\",\n          value: function value() {\n            if (!this._breakpoint) {\n              var t = this.dimensions;\n              t.containerTop = c.offsetRelative(this.container).top, t.containerHeight = this.container.clientHeight, t.containerBottom = t.containerTop + t.containerHeight, t.sidebarHeight = this.sidebarInner.offsetHeight, t.sidebarWidth = this.sidebarInner.offsetWidth, t.viewportHeight = window.innerHeight, t.maxTranslateY = t.containerHeight - t.sidebarHeight, this._calcDimensionsWithScroll();\n            }\n          }\n        }, {\n          key: \"_calcDimensionsWithScroll\",\n          value: function value() {\n            var t = this.dimensions;\n            t.sidebarLeft = c.offsetRelative(this.sidebar).left, t.viewportTop = document.documentElement.scrollTop || document.body.scrollTop, t.viewportBottom = t.viewportTop + t.viewportHeight, t.viewportLeft = document.documentElement.scrollLeft || document.body.scrollLeft, t.topSpacing = this.options.topSpacing, t.bottomSpacing = this.options.bottomSpacing, \"function\" == typeof t.topSpacing && (t.topSpacing = parseInt(t.topSpacing(this.sidebar)) || 0), \"function\" == typeof t.bottomSpacing && (t.bottomSpacing = parseInt(t.bottomSpacing(this.sidebar)) || 0), \"VIEWPORT-TOP\" === this.affixedType ? t.topSpacing < t.lastTopSpacing && (t.translateY += t.lastTopSpacing - t.topSpacing, this._reStyle = !0) : \"VIEWPORT-BOTTOM\" === this.affixedType && t.bottomSpacing < t.lastBottomSpacing && (t.translateY += t.lastBottomSpacing - t.bottomSpacing, this._reStyle = !0), t.lastTopSpacing = t.topSpacing, t.lastBottomSpacing = t.bottomSpacing;\n          }\n        }, {\n          key: \"isSidebarFitsViewport\",\n          value: function value() {\n            var t = this.dimensions,\n                e = \"down\" === this.scrollDirection ? t.lastBottomSpacing : t.lastTopSpacing;\n            return this.dimensions.sidebarHeight + e < this.dimensions.viewportHeight;\n          }\n        }, {\n          key: \"observeScrollDir\",\n          value: function value() {\n            var t = this.dimensions;\n\n            if (t.lastViewportTop !== t.viewportTop) {\n              var e = \"down\" === this.direction ? Math.min : Math.max;\n              t.viewportTop === e(t.viewportTop, t.lastViewportTop) && (this.direction = \"down\" === this.direction ? \"up\" : \"down\");\n            }\n          }\n        }, {\n          key: \"getAffixType\",\n          value: function value() {\n            this._calcDimensionsWithScroll();\n\n            var t = this.dimensions,\n                e = t.viewportTop + t.topSpacing,\n                i = this.affixedType;\n            return e <= t.containerTop || t.containerHeight <= t.sidebarHeight ? (t.translateY = 0, i = \"STATIC\") : i = \"up\" === this.direction ? this._getAffixTypeScrollingUp() : this._getAffixTypeScrollingDown(), t.translateY = Math.max(0, t.translateY), t.translateY = Math.min(t.containerHeight, t.translateY), t.translateY = Math.round(t.translateY), t.lastViewportTop = t.viewportTop, i;\n          }\n        }, {\n          key: \"_getAffixTypeScrollingDown\",\n          value: function value() {\n            var t = this.dimensions,\n                e = t.sidebarHeight + t.containerTop,\n                i = t.viewportTop + t.topSpacing,\n                n = t.viewportBottom - t.bottomSpacing,\n                o = this.affixedType;\n            return this.isSidebarFitsViewport() ? t.sidebarHeight + i >= t.containerBottom ? (t.translateY = t.containerBottom - e, o = \"CONTAINER-BOTTOM\") : i >= t.containerTop && (t.translateY = i - t.containerTop, o = \"VIEWPORT-TOP\") : t.containerBottom <= n ? (t.translateY = t.containerBottom - e, o = \"CONTAINER-BOTTOM\") : e + t.translateY <= n ? (t.translateY = n - e, o = \"VIEWPORT-BOTTOM\") : t.containerTop + t.translateY <= i && 0 !== t.translateY && t.maxTranslateY !== t.translateY && (o = \"VIEWPORT-UNBOTTOM\"), o;\n          }\n        }, {\n          key: \"_getAffixTypeScrollingUp\",\n          value: function value() {\n            var t = this.dimensions,\n                e = t.sidebarHeight + t.containerTop,\n                i = t.viewportTop + t.topSpacing,\n                n = t.viewportBottom - t.bottomSpacing,\n                o = this.affixedType;\n            return i <= t.translateY + t.containerTop ? (t.translateY = i - t.containerTop, o = \"VIEWPORT-TOP\") : t.containerBottom <= n ? (t.translateY = t.containerBottom - e, o = \"CONTAINER-BOTTOM\") : this.isSidebarFitsViewport() || t.containerTop <= i && 0 !== t.translateY && t.maxTranslateY !== t.translateY && (o = \"VIEWPORT-UNBOTTOM\"), o;\n          }\n        }, {\n          key: \"_getStyle\",\n          value: function value(t) {\n            if (void 0 !== t) {\n              var e = {\n                inner: {},\n                outer: {}\n              },\n                  i = this.dimensions;\n\n              switch (t) {\n                case \"VIEWPORT-TOP\":\n                  e.inner = {\n                    position: \"fixed\",\n                    top: i.topSpacing,\n                    left: i.sidebarLeft - i.viewportLeft,\n                    width: i.sidebarWidth\n                  };\n                  break;\n\n                case \"VIEWPORT-BOTTOM\":\n                  e.inner = {\n                    position: \"fixed\",\n                    top: \"auto\",\n                    left: i.sidebarLeft,\n                    bottom: i.bottomSpacing,\n                    width: i.sidebarWidth\n                  };\n                  break;\n\n                case \"CONTAINER-BOTTOM\":\n                case \"VIEWPORT-UNBOTTOM\":\n                  var n = this._getTranslate(0, i.translateY + \"px\");\n\n                  e.inner = n ? {\n                    transform: n\n                  } : {\n                    position: \"absolute\",\n                    top: i.translateY,\n                    width: i.sidebarWidth\n                  };\n              }\n\n              switch (t) {\n                case \"VIEWPORT-TOP\":\n                case \"VIEWPORT-BOTTOM\":\n                case \"VIEWPORT-UNBOTTOM\":\n                case \"CONTAINER-BOTTOM\":\n                  e.outer = {\n                    height: i.sidebarHeight,\n                    position: \"relative\"\n                  };\n              }\n\n              return e.outer = c.extend({\n                height: \"\",\n                position: \"\"\n              }, e.outer), e.inner = c.extend({\n                position: \"relative\",\n                top: \"\",\n                left: \"\",\n                bottom: \"\",\n                width: \"\",\n                transform: \"\"\n              }, e.inner), e;\n            }\n          }\n        }, {\n          key: \"stickyPosition\",\n          value: function value(t) {\n            if (!this._breakpoint) {\n              t = this._reStyle || t || !1, this.options.topSpacing, this.options.bottomSpacing;\n\n              var e = this.getAffixType(),\n                  i = this._getStyle(e);\n\n              if ((this.affixedType != e || t) && e) {\n                var n = \"affix.\" + e.toLowerCase().replace(\"viewport-\", \"\") + l;\n\n                for (var o in c.eventTrigger(this.sidebar, n), \"STATIC\" === e ? c.removeClass(this.sidebar, this.options.stickyClass) : c.addClass(this.sidebar, this.options.stickyClass), i.outer) {\n                  var s = \"number\" == typeof i.outer[o] ? \"px\" : \"\";\n                  this.sidebar.style[o] = i.outer[o] + s;\n                }\n\n                for (var r in i.inner) {\n                  var a = \"number\" == typeof i.inner[r] ? \"px\" : \"\";\n                  this.sidebarInner.style[r] = i.inner[r] + a;\n                }\n\n                var p = \"affixed.\" + e.toLowerCase().replace(\"viewport-\", \"\") + l;\n                c.eventTrigger(this.sidebar, p);\n              } else this._initialized && (this.sidebarInner.style.left = i.inner.left);\n\n              this.affixedType = e;\n            }\n          }\n        }, {\n          key: \"_widthBreakpoint\",\n          value: function value() {\n            window.innerWidth <= this.options.minWidth ? (this._breakpoint = !0, this.affixedType = \"STATIC\", this.sidebar.removeAttribute(\"style\"), c.removeClass(this.sidebar, this.options.stickyClass), this.sidebarInner.removeAttribute(\"style\")) : this._breakpoint = !1;\n          }\n        }, {\n          key: \"updateSticky\",\n          value: function value() {\n            var t,\n                e = this,\n                i = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};\n            this._running || (this._running = !0, t = i.type, requestAnimationFrame(function () {\n              switch (t) {\n                case \"scroll\":\n                  e._calcDimensionsWithScroll(), e.observeScrollDir(), e.stickyPosition();\n                  break;\n\n                case \"resize\":\n                default:\n                  e._widthBreakpoint(), e.calcDimensions(), e.stickyPosition(!0);\n              }\n\n              e._running = !1;\n            }));\n          }\n        }, {\n          key: \"_setSupportFeatures\",\n          value: function value() {\n            var t = this.support;\n            t.transform = c.supportTransform(), t.transform3d = c.supportTransform(!0);\n          }\n        }, {\n          key: \"_getTranslate\",\n          value: function value() {\n            var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 0,\n                e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0,\n                i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0;\n            return this.support.transform3d ? \"translate3d(\" + t + \", \" + e + \", \" + i + \")\" : !!this.support.translate && \"translate(\" + t + \", \" + e + \")\";\n          }\n        }, {\n          key: \"destroy\",\n          value: function value() {\n            window.removeEventListener(\"resize\", this, {\n              capture: !1\n            }), window.removeEventListener(\"scroll\", this, {\n              capture: !1\n            }), this.sidebar.classList.remove(this.options.stickyClass), this.sidebar.style.minHeight = \"\", this.sidebar.removeEventListener(\"update\" + l, this);\n            var t = {\n              inner: {},\n              outer: {}\n            };\n\n            for (var e in t.inner = {\n              position: \"\",\n              top: \"\",\n              left: \"\",\n              bottom: \"\",\n              width: \"\",\n              transform: \"\"\n            }, t.outer = {\n              height: \"\",\n              position: \"\"\n            }, t.outer) {\n              this.sidebar.style[e] = t.outer[e];\n            }\n\n            for (var i in t.inner) {\n              this.sidebarInner.style[i] = t.inner[i];\n            }\n\n            this.options.resizeSensor && \"undefined\" != typeof ResizeSensor && (ResizeSensor.detach(this.sidebarInner, this.handleEvent), ResizeSensor.detach(this.container, this.handleEvent));\n          }\n        }], [{\n          key: \"supportTransform\",\n          value: function value(t) {\n            var i = !1,\n                e = t ? \"perspective\" : \"transform\",\n                n = e.charAt(0).toUpperCase() + e.slice(1),\n                o = document.createElement(\"support\").style;\n            return (e + \" \" + [\"Webkit\", \"Moz\", \"O\", \"ms\"].join(n + \" \") + n).split(\" \").forEach(function (t, e) {\n              if (void 0 !== o[t]) return i = t, !1;\n            }), i;\n          }\n        }, {\n          key: \"eventTrigger\",\n          value: function value(t, e, i) {\n            try {\n              var n = new CustomEvent(e, {\n                detail: i\n              });\n            } catch (t) {\n              (n = document.createEvent(\"CustomEvent\")).initCustomEvent(e, !0, !0, i);\n            }\n\n            t.dispatchEvent(n);\n          }\n        }, {\n          key: \"extend\",\n          value: function value(t, e) {\n            var i = {};\n\n            for (var n in t) {\n              void 0 !== e[n] ? i[n] = e[n] : i[n] = t[n];\n            }\n\n            return i;\n          }\n        }, {\n          key: \"offsetRelative\",\n          value: function value(t) {\n            var e = {\n              left: 0,\n              top: 0\n            };\n\n            do {\n              var i = t.offsetTop,\n                  n = t.offsetLeft;\n              isNaN(i) || (e.top += i), isNaN(n) || (e.left += n), t = \"BODY\" === t.tagName ? t.parentElement : t.offsetParent;\n            } while (t);\n\n            return e;\n          }\n        }, {\n          key: \"addClass\",\n          value: function value(t, e) {\n            c.hasClass(t, e) || (t.classList ? t.classList.add(e) : t.className += \" \" + e);\n          }\n        }, {\n          key: \"removeClass\",\n          value: function value(t, e) {\n            c.hasClass(t, e) && (t.classList ? t.classList.remove(e) : t.className = t.className.replace(new RegExp(\"(^|\\\\b)\" + e.split(\" \").join(\"|\") + \"(\\\\b|$)\", \"gi\"), \" \"));\n          }\n        }, {\n          key: \"hasClass\",\n          value: function value(t, e) {\n            return t.classList ? t.classList.contains(e) : new RegExp(\"(^| )\" + e + \"( |$)\", \"gi\").test(t.className);\n          }\n        }, {\n          key: \"defaults\",\n          get: function get() {\n            return n;\n          }\n        }]), c;\n      }());\n\n      t[\"default\"] = i, window.StickySidebar = i;\n    })(e);\n  });\n  return t(i), t(e(function (t, e) {\n    (function (t) {\n      var e,\n          s = (e = t) && e.__esModule ? e : {\n        \"default\": e\n      };\n      !function () {\n        if (\"undefined\" != typeof window) {\n          var n = window.$ || window.jQuery || window.Zepto,\n              o = \"stickySidebar\";\n\n          if (n) {\n            n.fn.stickySidebar = function (i) {\n              return this.each(function () {\n                var t = n(this),\n                    e = n(this).data(o);\n\n                if (e || (e = new s[\"default\"](this, \"object\" == _typeof(i) && i), t.data(o, e)), \"string\" == typeof i) {\n                  if (void 0 === e[i] && -1 === [\"destroy\", \"updateSticky\"].indexOf(i)) throw new Error('No method named \"' + i + '\"');\n                  e[i]();\n                }\n              });\n            }, n.fn.stickySidebar.Constructor = s[\"default\"];\n            var t = n.fn.stickySidebar;\n\n            n.fn.stickySidebar.noConflict = function () {\n              return n.fn.stickySidebar = t, this;\n            };\n          }\n        }\n      }();\n    })(i);\n  }));\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/jquery.sticky-sidebar.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/jquery.sticky-sidebar.min.js");
/******/ 	
/******/ })()
;
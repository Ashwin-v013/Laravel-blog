/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/popper.min.js":
/*!************************************!*\
  !*** ./resources/js/popper.min.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n Copyright (C) Federico Zivolo 2019\n Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n(function (e, t) {\n  'object' == ( false ? 0 : _typeof(exports)) && 'undefined' != \"object\" ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n})(this, function () {\n  'use strict';\n\n  function e(e) {\n    return e && '[object Function]' === {}.toString.call(e);\n  }\n\n  function t(e, t) {\n    if (1 !== e.nodeType) return [];\n    var o = e.ownerDocument.defaultView,\n        n = o.getComputedStyle(e, null);\n    return t ? n[t] : n;\n  }\n\n  function o(e) {\n    return 'HTML' === e.nodeName ? e : e.parentNode || e.host;\n  }\n\n  function n(e) {\n    if (!e) return document.body;\n\n    switch (e.nodeName) {\n      case 'HTML':\n      case 'BODY':\n        return e.ownerDocument.body;\n\n      case '#document':\n        return e.body;\n    }\n\n    var i = t(e),\n        r = i.overflow,\n        p = i.overflowX,\n        s = i.overflowY;\n    return /(auto|scroll|overlay)/.test(r + s + p) ? e : n(o(e));\n  }\n\n  function r(e) {\n    return 11 === e ? pe : 10 === e ? se : pe || se;\n  }\n\n  function p(e) {\n    if (!e) return document.documentElement;\n\n    for (var o = r(10) ? document.body : null, n = e.offsetParent || null; n === o && e.nextElementSibling;) {\n      n = (e = e.nextElementSibling).offsetParent;\n    }\n\n    var i = n && n.nodeName;\n    return i && 'BODY' !== i && 'HTML' !== i ? -1 !== ['TH', 'TD', 'TABLE'].indexOf(n.nodeName) && 'static' === t(n, 'position') ? p(n) : n : e ? e.ownerDocument.documentElement : document.documentElement;\n  }\n\n  function s(e) {\n    var t = e.nodeName;\n    return 'BODY' !== t && ('HTML' === t || p(e.firstElementChild) === e);\n  }\n\n  function d(e) {\n    return null === e.parentNode ? e : d(e.parentNode);\n  }\n\n  function a(e, t) {\n    if (!e || !e.nodeType || !t || !t.nodeType) return document.documentElement;\n    var o = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,\n        n = o ? e : t,\n        i = o ? t : e,\n        r = document.createRange();\n    r.setStart(n, 0), r.setEnd(i, 0);\n    var l = r.commonAncestorContainer;\n    if (e !== l && t !== l || n.contains(i)) return s(l) ? l : p(l);\n    var f = d(e);\n    return f.host ? a(f.host, t) : a(e, d(t).host);\n  }\n\n  function l(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 'top',\n        o = 'top' === t ? 'scrollTop' : 'scrollLeft',\n        n = e.nodeName;\n\n    if ('BODY' === n || 'HTML' === n) {\n      var i = e.ownerDocument.documentElement,\n          r = e.ownerDocument.scrollingElement || i;\n      return r[o];\n    }\n\n    return e[o];\n  }\n\n  function f(e, t) {\n    var o = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],\n        n = l(t, 'top'),\n        i = l(t, 'left'),\n        r = o ? -1 : 1;\n    return e.top += n * r, e.bottom += n * r, e.left += i * r, e.right += i * r, e;\n  }\n\n  function m(e, t) {\n    var o = 'x' === t ? 'Left' : 'Top',\n        n = 'Left' == o ? 'Right' : 'Bottom';\n    return parseFloat(e['border' + o + 'Width'], 10) + parseFloat(e['border' + n + 'Width'], 10);\n  }\n\n  function h(e, t, o, n) {\n    return ee(t['offset' + e], t['scroll' + e], o['client' + e], o['offset' + e], o['scroll' + e], r(10) ? parseInt(o['offset' + e]) + parseInt(n['margin' + ('Height' === e ? 'Top' : 'Left')]) + parseInt(n['margin' + ('Height' === e ? 'Bottom' : 'Right')]) : 0);\n  }\n\n  function c(e) {\n    var t = e.body,\n        o = e.documentElement,\n        n = r(10) && getComputedStyle(o);\n    return {\n      height: h('Height', t, o, n),\n      width: h('Width', t, o, n)\n    };\n  }\n\n  function g(e) {\n    return fe({}, e, {\n      right: e.left + e.width,\n      bottom: e.top + e.height\n    });\n  }\n\n  function u(e) {\n    var o = {};\n\n    try {\n      if (r(10)) {\n        o = e.getBoundingClientRect();\n        var n = l(e, 'top'),\n            i = l(e, 'left');\n        o.top += n, o.left += i, o.bottom += n, o.right += i;\n      } else o = e.getBoundingClientRect();\n    } catch (t) {}\n\n    var p = {\n      left: o.left,\n      top: o.top,\n      width: o.right - o.left,\n      height: o.bottom - o.top\n    },\n        s = 'HTML' === e.nodeName ? c(e.ownerDocument) : {},\n        d = s.width || e.clientWidth || p.right - p.left,\n        a = s.height || e.clientHeight || p.bottom - p.top,\n        f = e.offsetWidth - d,\n        h = e.offsetHeight - a;\n\n    if (f || h) {\n      var u = t(e);\n      f -= m(u, 'x'), h -= m(u, 'y'), p.width -= f, p.height -= h;\n    }\n\n    return g(p);\n  }\n\n  function b(e, o) {\n    var i = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],\n        p = r(10),\n        s = 'HTML' === o.nodeName,\n        d = u(e),\n        a = u(o),\n        l = n(e),\n        m = t(o),\n        h = parseFloat(m.borderTopWidth, 10),\n        c = parseFloat(m.borderLeftWidth, 10);\n    i && s && (a.top = ee(a.top, 0), a.left = ee(a.left, 0));\n    var b = g({\n      top: d.top - a.top - h,\n      left: d.left - a.left - c,\n      width: d.width,\n      height: d.height\n    });\n\n    if (b.marginTop = 0, b.marginLeft = 0, !p && s) {\n      var w = parseFloat(m.marginTop, 10),\n          y = parseFloat(m.marginLeft, 10);\n      b.top -= h - w, b.bottom -= h - w, b.left -= c - y, b.right -= c - y, b.marginTop = w, b.marginLeft = y;\n    }\n\n    return (p && !i ? o.contains(l) : o === l && 'BODY' !== l.nodeName) && (b = f(b, o)), b;\n  }\n\n  function w(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],\n        o = e.ownerDocument.documentElement,\n        n = b(e, o),\n        i = ee(o.clientWidth, window.innerWidth || 0),\n        r = ee(o.clientHeight, window.innerHeight || 0),\n        p = t ? 0 : l(o),\n        s = t ? 0 : l(o, 'left'),\n        d = {\n      top: p - n.top + n.marginTop,\n      left: s - n.left + n.marginLeft,\n      width: i,\n      height: r\n    };\n    return g(d);\n  }\n\n  function y(e) {\n    var n = e.nodeName;\n    if ('BODY' === n || 'HTML' === n) return !1;\n    if ('fixed' === t(e, 'position')) return !0;\n    var i = o(e);\n    return !!i && y(i);\n  }\n\n  function E(e) {\n    if (!e || !e.parentElement || r()) return document.documentElement;\n\n    for (var o = e.parentElement; o && 'none' === t(o, 'transform');) {\n      o = o.parentElement;\n    }\n\n    return o || document.documentElement;\n  }\n\n  function v(e, t, i, r) {\n    var p = 4 < arguments.length && void 0 !== arguments[4] && arguments[4],\n        s = {\n      top: 0,\n      left: 0\n    },\n        d = p ? E(e) : a(e, t);\n    if ('viewport' === r) s = w(d, p);else {\n      var l;\n      'scrollParent' === r ? (l = n(o(t)), 'BODY' === l.nodeName && (l = e.ownerDocument.documentElement)) : 'window' === r ? l = e.ownerDocument.documentElement : l = r;\n      var f = b(l, d, p);\n\n      if ('HTML' === l.nodeName && !y(d)) {\n        var m = c(e.ownerDocument),\n            h = m.height,\n            g = m.width;\n        s.top += f.top - f.marginTop, s.bottom = h + f.top, s.left += f.left - f.marginLeft, s.right = g + f.left;\n      } else s = f;\n    }\n    i = i || 0;\n    var u = 'number' == typeof i;\n    return s.left += u ? i : i.left || 0, s.top += u ? i : i.top || 0, s.right -= u ? i : i.right || 0, s.bottom -= u ? i : i.bottom || 0, s;\n  }\n\n  function x(e) {\n    var t = e.width,\n        o = e.height;\n    return t * o;\n  }\n\n  function O(e, t, o, n, i) {\n    var r = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;\n    if (-1 === e.indexOf('auto')) return e;\n    var p = v(o, n, r, i),\n        s = {\n      top: {\n        width: p.width,\n        height: t.top - p.top\n      },\n      right: {\n        width: p.right - t.right,\n        height: p.height\n      },\n      bottom: {\n        width: p.width,\n        height: p.bottom - t.bottom\n      },\n      left: {\n        width: t.left - p.left,\n        height: p.height\n      }\n    },\n        d = Object.keys(s).map(function (e) {\n      return fe({\n        key: e\n      }, s[e], {\n        area: x(s[e])\n      });\n    }).sort(function (e, t) {\n      return t.area - e.area;\n    }),\n        a = d.filter(function (e) {\n      var t = e.width,\n          n = e.height;\n      return t >= o.clientWidth && n >= o.clientHeight;\n    }),\n        l = 0 < a.length ? a[0].key : d[0].key,\n        f = e.split('-')[1];\n    return l + (f ? '-' + f : '');\n  }\n\n  function L(e, t, o) {\n    var n = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null,\n        i = n ? E(t) : a(t, o);\n    return b(o, i, n);\n  }\n\n  function S(e) {\n    var t = e.ownerDocument.defaultView,\n        o = t.getComputedStyle(e),\n        n = parseFloat(o.marginTop || 0) + parseFloat(o.marginBottom || 0),\n        i = parseFloat(o.marginLeft || 0) + parseFloat(o.marginRight || 0),\n        r = {\n      width: e.offsetWidth + i,\n      height: e.offsetHeight + n\n    };\n    return r;\n  }\n\n  function T(e) {\n    var t = {\n      left: 'right',\n      right: 'left',\n      bottom: 'top',\n      top: 'bottom'\n    };\n    return e.replace(/left|right|bottom|top/g, function (e) {\n      return t[e];\n    });\n  }\n\n  function D(e, t, o) {\n    o = o.split('-')[0];\n    var n = S(e),\n        i = {\n      width: n.width,\n      height: n.height\n    },\n        r = -1 !== ['right', 'left'].indexOf(o),\n        p = r ? 'top' : 'left',\n        s = r ? 'left' : 'top',\n        d = r ? 'height' : 'width',\n        a = r ? 'width' : 'height';\n    return i[p] = t[p] + t[d] / 2 - n[d] / 2, i[s] = o === s ? t[s] - n[a] : t[T(s)], i;\n  }\n\n  function C(e, t) {\n    return Array.prototype.find ? e.find(t) : e.filter(t)[0];\n  }\n\n  function N(e, t, o) {\n    if (Array.prototype.findIndex) return e.findIndex(function (e) {\n      return e[t] === o;\n    });\n    var n = C(e, function (e) {\n      return e[t] === o;\n    });\n    return e.indexOf(n);\n  }\n\n  function P(t, o, n) {\n    var i = void 0 === n ? t : t.slice(0, N(t, 'name', n));\n    return i.forEach(function (t) {\n      t['function'] && console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n      var n = t['function'] || t.fn;\n      t.enabled && e(n) && (o.offsets.popper = g(o.offsets.popper), o.offsets.reference = g(o.offsets.reference), o = n(o, t));\n    }), o;\n  }\n\n  function k() {\n    if (!this.state.isDestroyed) {\n      var e = {\n        instance: this,\n        styles: {},\n        arrowStyles: {},\n        attributes: {},\n        flipped: !1,\n        offsets: {}\n      };\n      e.offsets.reference = L(this.state, this.popper, this.reference, this.options.positionFixed), e.placement = O(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), e.originalPlacement = e.placement, e.positionFixed = this.options.positionFixed, e.offsets.popper = D(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute', e = P(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e));\n    }\n  }\n\n  function W(e, t) {\n    return e.some(function (e) {\n      var o = e.name,\n          n = e.enabled;\n      return n && o === t;\n    });\n  }\n\n  function H(e) {\n    for (var t = [!1, 'ms', 'Webkit', 'Moz', 'O'], o = e.charAt(0).toUpperCase() + e.slice(1), n = 0; n < t.length; n++) {\n      var i = t[n],\n          r = i ? '' + i + o : e;\n      if ('undefined' != typeof document.body.style[r]) return r;\n    }\n\n    return null;\n  }\n\n  function B() {\n    return this.state.isDestroyed = !0, W(this.modifiers, 'applyStyle') && (this.popper.removeAttribute('x-placement'), this.popper.style.position = '', this.popper.style.top = '', this.popper.style.left = '', this.popper.style.right = '', this.popper.style.bottom = '', this.popper.style.willChange = '', this.popper.style[H('transform')] = ''), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;\n  }\n\n  function A(e) {\n    var t = e.ownerDocument;\n    return t ? t.defaultView : window;\n  }\n\n  function M(e, t, o, i) {\n    var r = 'BODY' === e.nodeName,\n        p = r ? e.ownerDocument.defaultView : e;\n    p.addEventListener(t, o, {\n      passive: !0\n    }), r || M(n(p.parentNode), t, o, i), i.push(p);\n  }\n\n  function F(e, t, o, i) {\n    o.updateBound = i, A(e).addEventListener('resize', o.updateBound, {\n      passive: !0\n    });\n    var r = n(e);\n    return M(r, 'scroll', o.updateBound, o.scrollParents), o.scrollElement = r, o.eventsEnabled = !0, o;\n  }\n\n  function I() {\n    this.state.eventsEnabled || (this.state = F(this.reference, this.options, this.state, this.scheduleUpdate));\n  }\n\n  function R(e, t) {\n    return A(e).removeEventListener('resize', t.updateBound), t.scrollParents.forEach(function (e) {\n      e.removeEventListener('scroll', t.updateBound);\n    }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t;\n  }\n\n  function U() {\n    this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = R(this.reference, this.state));\n  }\n\n  function Y(e) {\n    return '' !== e && !isNaN(parseFloat(e)) && isFinite(e);\n  }\n\n  function j(e, t) {\n    Object.keys(t).forEach(function (o) {\n      var n = '';\n      -1 !== ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(o) && Y(t[o]) && (n = 'px'), e.style[o] = t[o] + n;\n    });\n  }\n\n  function V(e, t) {\n    Object.keys(t).forEach(function (o) {\n      var n = t[o];\n      !1 === n ? e.removeAttribute(o) : e.setAttribute(o, t[o]);\n    });\n  }\n\n  function q(e, t) {\n    var o = e.offsets,\n        n = o.popper,\n        i = o.reference,\n        r = $,\n        p = function p(e) {\n      return e;\n    },\n        s = r(i.width),\n        d = r(n.width),\n        a = -1 !== ['left', 'right'].indexOf(e.placement),\n        l = -1 !== e.placement.indexOf('-'),\n        f = t ? a || l || s % 2 == d % 2 ? r : Z : p,\n        m = t ? r : p;\n\n    return {\n      left: f(1 == s % 2 && 1 == d % 2 && !l && t ? n.left - 1 : n.left),\n      top: m(n.top),\n      bottom: m(n.bottom),\n      right: f(n.right)\n    };\n  }\n\n  function K(e, t, o) {\n    var n = C(e, function (e) {\n      var o = e.name;\n      return o === t;\n    }),\n        i = !!n && e.some(function (e) {\n      return e.name === o && e.enabled && e.order < n.order;\n    });\n\n    if (!i) {\n      var r = '`' + t + '`';\n      console.warn('`' + o + '`' + ' modifier is required by ' + r + ' modifier in order to work, be sure to include it before ' + r + '!');\n    }\n\n    return i;\n  }\n\n  function z(e) {\n    return 'end' === e ? 'start' : 'start' === e ? 'end' : e;\n  }\n\n  function G(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],\n        o = ce.indexOf(e),\n        n = ce.slice(o + 1).concat(ce.slice(0, o));\n    return t ? n.reverse() : n;\n  }\n\n  function _(e, t, o, n) {\n    var i = e.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/),\n        r = +i[1],\n        p = i[2];\n    if (!r) return e;\n\n    if (0 === p.indexOf('%')) {\n      var s;\n\n      switch (p) {\n        case '%p':\n          s = o;\n          break;\n\n        case '%':\n        case '%r':\n        default:\n          s = n;\n      }\n\n      var d = g(s);\n      return d[t] / 100 * r;\n    }\n\n    if ('vh' === p || 'vw' === p) {\n      var a;\n      return a = 'vh' === p ? ee(document.documentElement.clientHeight, window.innerHeight || 0) : ee(document.documentElement.clientWidth, window.innerWidth || 0), a / 100 * r;\n    }\n\n    return r;\n  }\n\n  function X(e, t, o, n) {\n    var i = [0, 0],\n        r = -1 !== ['right', 'left'].indexOf(n),\n        p = e.split(/(\\+|\\-)/).map(function (e) {\n      return e.trim();\n    }),\n        s = p.indexOf(C(p, function (e) {\n      return -1 !== e.search(/,|\\s/);\n    }));\n    p[s] && -1 === p[s].indexOf(',') && console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n    var d = /\\s*,\\s*|\\s+/,\n        a = -1 === s ? [p] : [p.slice(0, s).concat([p[s].split(d)[0]]), [p[s].split(d)[1]].concat(p.slice(s + 1))];\n    return a = a.map(function (e, n) {\n      var i = (1 === n ? !r : r) ? 'height' : 'width',\n          p = !1;\n      return e.reduce(function (e, t) {\n        return '' === e[e.length - 1] && -1 !== ['+', '-'].indexOf(t) ? (e[e.length - 1] = t, p = !0, e) : p ? (e[e.length - 1] += t, p = !1, e) : e.concat(t);\n      }, []).map(function (e) {\n        return _(e, i, t, o);\n      });\n    }), a.forEach(function (e, t) {\n      e.forEach(function (o, n) {\n        Y(o) && (i[t] += o * ('-' === e[n - 1] ? -1 : 1));\n      });\n    }), i;\n  }\n\n  function J(e, t) {\n    var o,\n        n = t.offset,\n        i = e.placement,\n        r = e.offsets,\n        p = r.popper,\n        s = r.reference,\n        d = i.split('-')[0];\n    return o = Y(+n) ? [+n, 0] : X(n, p, s, d), 'left' === d ? (p.top += o[0], p.left -= o[1]) : 'right' === d ? (p.top += o[0], p.left += o[1]) : 'top' === d ? (p.left += o[0], p.top -= o[1]) : 'bottom' === d && (p.left += o[0], p.top += o[1]), e.popper = p, e;\n  }\n\n  for (var Q = Math.min, Z = Math.floor, $ = Math.round, ee = Math.max, te = 'undefined' != typeof window && 'undefined' != typeof document, oe = ['Edge', 'Trident', 'Firefox'], ne = 0, ie = 0; ie < oe.length; ie += 1) {\n    if (te && 0 <= navigator.userAgent.indexOf(oe[ie])) {\n      ne = 1;\n      break;\n    }\n  }\n\n  var i = te && window.Promise,\n      re = i ? function (e) {\n    var t = !1;\n    return function () {\n      t || (t = !0, window.Promise.resolve().then(function () {\n        t = !1, e();\n      }));\n    };\n  } : function (e) {\n    var t = !1;\n    return function () {\n      t || (t = !0, setTimeout(function () {\n        t = !1, e();\n      }, ne));\n    };\n  },\n      pe = te && !!(window.MSInputMethodContext && document.documentMode),\n      se = te && /MSIE 10/.test(navigator.userAgent),\n      de = function de(e, t) {\n    if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function');\n  },\n      ae = function () {\n    function e(e, t) {\n      for (var o, n = 0; n < t.length; n++) {\n        o = t[n], o.enumerable = o.enumerable || !1, o.configurable = !0, 'value' in o && (o.writable = !0), Object.defineProperty(e, o.key, o);\n      }\n    }\n\n    return function (t, o, n) {\n      return o && e(t.prototype, o), n && e(t, n), t;\n    };\n  }(),\n      le = function le(e, t, o) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: o,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = o, e;\n  },\n      fe = Object.assign || function (e) {\n    for (var t, o = 1; o < arguments.length; o++) {\n      for (var n in t = arguments[o], t) {\n        Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);\n      }\n    }\n\n    return e;\n  },\n      me = te && /Firefox/i.test(navigator.userAgent),\n      he = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'],\n      ce = he.slice(3),\n      ge = {\n    FLIP: 'flip',\n    CLOCKWISE: 'clockwise',\n    COUNTERCLOCKWISE: 'counterclockwise'\n  },\n      ue = function () {\n    function t(o, n) {\n      var i = this,\n          r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};\n      de(this, t), this.scheduleUpdate = function () {\n        return requestAnimationFrame(i.update);\n      }, this.update = re(this.update.bind(this)), this.options = fe({}, t.Defaults, r), this.state = {\n        isDestroyed: !1,\n        isCreated: !1,\n        scrollParents: []\n      }, this.reference = o && o.jquery ? o[0] : o, this.popper = n && n.jquery ? n[0] : n, this.options.modifiers = {}, Object.keys(fe({}, t.Defaults.modifiers, r.modifiers)).forEach(function (e) {\n        i.options.modifiers[e] = fe({}, t.Defaults.modifiers[e] || {}, r.modifiers ? r.modifiers[e] : {});\n      }), this.modifiers = Object.keys(this.options.modifiers).map(function (e) {\n        return fe({\n          name: e\n        }, i.options.modifiers[e]);\n      }).sort(function (e, t) {\n        return e.order - t.order;\n      }), this.modifiers.forEach(function (t) {\n        t.enabled && e(t.onLoad) && t.onLoad(i.reference, i.popper, i.options, t, i.state);\n      }), this.update();\n      var p = this.options.eventsEnabled;\n      p && this.enableEventListeners(), this.state.eventsEnabled = p;\n    }\n\n    return ae(t, [{\n      key: 'update',\n      value: function value() {\n        return k.call(this);\n      }\n    }, {\n      key: 'destroy',\n      value: function value() {\n        return B.call(this);\n      }\n    }, {\n      key: 'enableEventListeners',\n      value: function value() {\n        return I.call(this);\n      }\n    }, {\n      key: 'disableEventListeners',\n      value: function value() {\n        return U.call(this);\n      }\n    }]), t;\n  }();\n\n  return ue.Utils = ('undefined' == typeof window ? __webpack_require__.g : window).PopperUtils, ue.placements = he, ue.Defaults = {\n    placement: 'bottom',\n    positionFixed: !1,\n    eventsEnabled: !0,\n    removeOnDestroy: !1,\n    onCreate: function onCreate() {},\n    onUpdate: function onUpdate() {},\n    modifiers: {\n      shift: {\n        order: 100,\n        enabled: !0,\n        fn: function fn(e) {\n          var t = e.placement,\n              o = t.split('-')[0],\n              n = t.split('-')[1];\n\n          if (n) {\n            var i = e.offsets,\n                r = i.reference,\n                p = i.popper,\n                s = -1 !== ['bottom', 'top'].indexOf(o),\n                d = s ? 'left' : 'top',\n                a = s ? 'width' : 'height',\n                l = {\n              start: le({}, d, r[d]),\n              end: le({}, d, r[d] + r[a] - p[a])\n            };\n            e.offsets.popper = fe({}, p, l[n]);\n          }\n\n          return e;\n        }\n      },\n      offset: {\n        order: 200,\n        enabled: !0,\n        fn: J,\n        offset: 0\n      },\n      preventOverflow: {\n        order: 300,\n        enabled: !0,\n        fn: function fn(e, t) {\n          var o = t.boundariesElement || p(e.instance.popper);\n          e.instance.reference === o && (o = p(o));\n          var n = H('transform'),\n              i = e.instance.popper.style,\n              r = i.top,\n              s = i.left,\n              d = i[n];\n          i.top = '', i.left = '', i[n] = '';\n          var a = v(e.instance.popper, e.instance.reference, t.padding, o, e.positionFixed);\n          i.top = r, i.left = s, i[n] = d, t.boundaries = a;\n          var l = t.priority,\n              f = e.offsets.popper,\n              m = {\n            primary: function primary(e) {\n              var o = f[e];\n              return f[e] < a[e] && !t.escapeWithReference && (o = ee(f[e], a[e])), le({}, e, o);\n            },\n            secondary: function secondary(e) {\n              var o = 'right' === e ? 'left' : 'top',\n                  n = f[o];\n              return f[e] > a[e] && !t.escapeWithReference && (n = Q(f[o], a[e] - ('right' === e ? f.width : f.height))), le({}, o, n);\n            }\n          };\n          return l.forEach(function (e) {\n            var t = -1 === ['left', 'top'].indexOf(e) ? 'secondary' : 'primary';\n            f = fe({}, f, m[t](e));\n          }), e.offsets.popper = f, e;\n        },\n        priority: ['left', 'right', 'top', 'bottom'],\n        padding: 5,\n        boundariesElement: 'scrollParent'\n      },\n      keepTogether: {\n        order: 400,\n        enabled: !0,\n        fn: function fn(e) {\n          var t = e.offsets,\n              o = t.popper,\n              n = t.reference,\n              i = e.placement.split('-')[0],\n              r = Z,\n              p = -1 !== ['top', 'bottom'].indexOf(i),\n              s = p ? 'right' : 'bottom',\n              d = p ? 'left' : 'top',\n              a = p ? 'width' : 'height';\n          return o[s] < r(n[d]) && (e.offsets.popper[d] = r(n[d]) - o[a]), o[d] > r(n[s]) && (e.offsets.popper[d] = r(n[s])), e;\n        }\n      },\n      arrow: {\n        order: 500,\n        enabled: !0,\n        fn: function fn(e, o) {\n          var n;\n          if (!K(e.instance.modifiers, 'arrow', 'keepTogether')) return e;\n          var i = o.element;\n\n          if ('string' == typeof i) {\n            if (i = e.instance.popper.querySelector(i), !i) return e;\n          } else if (!e.instance.popper.contains(i)) return console.warn('WARNING: `arrow.element` must be child of its popper element!'), e;\n\n          var r = e.placement.split('-')[0],\n              p = e.offsets,\n              s = p.popper,\n              d = p.reference,\n              a = -1 !== ['left', 'right'].indexOf(r),\n              l = a ? 'height' : 'width',\n              f = a ? 'Top' : 'Left',\n              m = f.toLowerCase(),\n              h = a ? 'left' : 'top',\n              c = a ? 'bottom' : 'right',\n              u = S(i)[l];\n          d[c] - u < s[m] && (e.offsets.popper[m] -= s[m] - (d[c] - u)), d[m] + u > s[c] && (e.offsets.popper[m] += d[m] + u - s[c]), e.offsets.popper = g(e.offsets.popper);\n          var b = d[m] + d[l] / 2 - u / 2,\n              w = t(e.instance.popper),\n              y = parseFloat(w['margin' + f], 10),\n              E = parseFloat(w['border' + f + 'Width'], 10),\n              v = b - e.offsets.popper[m] - y - E;\n          return v = ee(Q(s[l] - u, v), 0), e.arrowElement = i, e.offsets.arrow = (n = {}, le(n, m, $(v)), le(n, h, ''), n), e;\n        },\n        element: '[x-arrow]'\n      },\n      flip: {\n        order: 600,\n        enabled: !0,\n        fn: function fn(e, t) {\n          if (W(e.instance.modifiers, 'inner')) return e;\n          if (e.flipped && e.placement === e.originalPlacement) return e;\n          var o = v(e.instance.popper, e.instance.reference, t.padding, t.boundariesElement, e.positionFixed),\n              n = e.placement.split('-')[0],\n              i = T(n),\n              r = e.placement.split('-')[1] || '',\n              p = [];\n\n          switch (t.behavior) {\n            case ge.FLIP:\n              p = [n, i];\n              break;\n\n            case ge.CLOCKWISE:\n              p = G(n);\n              break;\n\n            case ge.COUNTERCLOCKWISE:\n              p = G(n, !0);\n              break;\n\n            default:\n              p = t.behavior;\n          }\n\n          return p.forEach(function (s, d) {\n            if (n !== s || p.length === d + 1) return e;\n            n = e.placement.split('-')[0], i = T(n);\n            var a = e.offsets.popper,\n                l = e.offsets.reference,\n                f = Z,\n                m = 'left' === n && f(a.right) > f(l.left) || 'right' === n && f(a.left) < f(l.right) || 'top' === n && f(a.bottom) > f(l.top) || 'bottom' === n && f(a.top) < f(l.bottom),\n                h = f(a.left) < f(o.left),\n                c = f(a.right) > f(o.right),\n                g = f(a.top) < f(o.top),\n                u = f(a.bottom) > f(o.bottom),\n                b = 'left' === n && h || 'right' === n && c || 'top' === n && g || 'bottom' === n && u,\n                w = -1 !== ['top', 'bottom'].indexOf(n),\n                y = !!t.flipVariations && (w && 'start' === r && h || w && 'end' === r && c || !w && 'start' === r && g || !w && 'end' === r && u);\n            (m || b || y) && (e.flipped = !0, (m || b) && (n = p[d + 1]), y && (r = z(r)), e.placement = n + (r ? '-' + r : ''), e.offsets.popper = fe({}, e.offsets.popper, D(e.instance.popper, e.offsets.reference, e.placement)), e = P(e.instance.modifiers, e, 'flip'));\n          }), e;\n        },\n        behavior: 'flip',\n        padding: 5,\n        boundariesElement: 'viewport'\n      },\n      inner: {\n        order: 700,\n        enabled: !1,\n        fn: function fn(e) {\n          var t = e.placement,\n              o = t.split('-')[0],\n              n = e.offsets,\n              i = n.popper,\n              r = n.reference,\n              p = -1 !== ['left', 'right'].indexOf(o),\n              s = -1 === ['top', 'left'].indexOf(o);\n          return i[p ? 'left' : 'top'] = r[o] - (s ? i[p ? 'width' : 'height'] : 0), e.placement = T(t), e.offsets.popper = g(i), e;\n        }\n      },\n      hide: {\n        order: 800,\n        enabled: !0,\n        fn: function fn(e) {\n          if (!K(e.instance.modifiers, 'hide', 'preventOverflow')) return e;\n          var t = e.offsets.reference,\n              o = C(e.instance.modifiers, function (e) {\n            return 'preventOverflow' === e.name;\n          }).boundaries;\n\n          if (t.bottom < o.top || t.left > o.right || t.top > o.bottom || t.right < o.left) {\n            if (!0 === e.hide) return e;\n            e.hide = !0, e.attributes['x-out-of-boundaries'] = '';\n          } else {\n            if (!1 === e.hide) return e;\n            e.hide = !1, e.attributes['x-out-of-boundaries'] = !1;\n          }\n\n          return e;\n        }\n      },\n      computeStyle: {\n        order: 850,\n        enabled: !0,\n        fn: function fn(e, t) {\n          var o = t.x,\n              n = t.y,\n              i = e.offsets.popper,\n              r = C(e.instance.modifiers, function (e) {\n            return 'applyStyle' === e.name;\n          }).gpuAcceleration;\n          void 0 !== r && console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n          var s,\n              d,\n              a = void 0 === r ? t.gpuAcceleration : r,\n              l = p(e.instance.popper),\n              f = u(l),\n              m = {\n            position: i.position\n          },\n              h = q(e, 2 > window.devicePixelRatio || !me),\n              c = 'bottom' === o ? 'top' : 'bottom',\n              g = 'right' === n ? 'left' : 'right',\n              b = H('transform');\n          if (d = 'bottom' == c ? 'HTML' === l.nodeName ? -l.clientHeight + h.bottom : -f.height + h.bottom : h.top, s = 'right' == g ? 'HTML' === l.nodeName ? -l.clientWidth + h.right : -f.width + h.right : h.left, a && b) m[b] = 'translate3d(' + s + 'px, ' + d + 'px, 0)', m[c] = 0, m[g] = 0, m.willChange = 'transform';else {\n            var w = 'bottom' == c ? -1 : 1,\n                y = 'right' == g ? -1 : 1;\n            m[c] = d * w, m[g] = s * y, m.willChange = c + ', ' + g;\n          }\n          var E = {\n            \"x-placement\": e.placement\n          };\n          return e.attributes = fe({}, E, e.attributes), e.styles = fe({}, m, e.styles), e.arrowStyles = fe({}, e.offsets.arrow, e.arrowStyles), e;\n        },\n        gpuAcceleration: !0,\n        x: 'bottom',\n        y: 'right'\n      },\n      applyStyle: {\n        order: 900,\n        enabled: !0,\n        fn: function fn(e) {\n          return j(e.instance.popper, e.styles), V(e.instance.popper, e.attributes), e.arrowElement && Object.keys(e.arrowStyles).length && j(e.arrowElement, e.arrowStyles), e;\n        },\n        onLoad: function onLoad(e, t, o, n, i) {\n          var r = L(i, t, e, o.positionFixed),\n              p = O(o.placement, r, t, e, o.modifiers.flip.boundariesElement, o.modifiers.flip.padding);\n          return t.setAttribute('x-placement', p), j(t, {\n            position: o.positionFixed ? 'fixed' : 'absolute'\n          }), o;\n        },\n        gpuAcceleration: void 0\n      }\n    }\n  }, ue;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/popper.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/popper.min.js");
/******/ 	
/******/ })()
;